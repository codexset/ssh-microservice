<?php
declare(strict_types=1);

namespace Hyperf\Support\Facades;

use Hyperf\Support\Common\Facade;

/**
 * Class Redis
 * @package Hyperf\Support\Facades
 * @method static bool connect(string $host, int $port = 6379, float $timeout = 0.0, mixed $reserved = null, int $retryInterval = 0, float $readTimeout = 0.0)
 * @method static bool open(string $host, int $port = 6379, float $timeout = 0.0, mixed $reserved = null, int $retryInterval = 0, float $readTimeout = 0.0)
 * @method static bool isConnected()
 * @method static string|bool getHost()
 * @method static int|bool getPort()
 * @method static int|bool getDbNum()
 * @method static float|bool getTimeout()
 * @method static float|bool getReadTimeout()
 * @method static string|null|bool getPersistentID()
 * @method static string|null|bool getAuth()
 * @method static bool pconnect(string $host, int $port = 6379, float $timeout = 0.0, string $persistentId = null, int $retryInterval = 0, float $readTimeout = 0.0)
 * @method static bool popen(string $host, int $port = 6379, float $timeout = 0.0, string $persistentId = null, int $retryInterval = 0, float $readTimeout = 0.0)
 * @method static bool close()
 * @method static bool swapdb(int $db1, int $db2)
 * @method static bool setOption(int $option, mixed $value)
 * @method static mixed|null getOption(int $option)
 * @method static string ping()
 * @method static string echo (string $message)
 * @method static string|mixed|bool get(string $key)
 * @method static bool set(string $key, string|mixed $value, int|array $timeout = null)
 * @method static bool setex(string $key, int $ttl, string|mixed $value)
 * @method static bool psetex(string $key, int $ttl, string|mixed $value)
 * @method static bool setnx(string $key, string|mixed $value)
 * @method static int del(int|string|array $key1, int|string ...$otherKeys)
 * @method static int delete(string|string[] $key1, string $key2 = null, string $key3 = null)
 * @method static int unlink(string|string[] $key1, string $key2 = null, string $key3 = null)
 * @method static Redis multi(int $mode = \Redis::MULTI)
 * @method static void|array exec()
 * @method static void discard()
 * @method static void watch(string|string[] $key)
 * @method static void unwatch()
 * @method static mixed|null subscribe(string[] $channels, string|array $callback)
 * @method static void psubscribe(array $patterns, string|array $callback)
 * @method static int publish(string $channel, string $message)
 * @method static array|int pubsub(string $keyword, string|array $argument)
 * @method static void unsubscribe(array $channels = null)
 * @method static void punsubscribe(array $patterns = null)
 * @method static int|bool exists(string|string[] $key)
 * @method static int incr(string $key)
 * @method static float incrByFloat(string $key, float $increment)
 * @method static int incrBy(string $key, int $value)
 * @method static int decr(string $key)
 * @method static int decrBy(string $key, int $value)
 * @method static int|bool lPush(string $key, string|mixed ...$value1)
 * @method static int|bool rPush(string $key, string|mixed ...$value1)
 * @method static int|bool lPushx(string $key, string|mixed $value)
 * @method static int|bool rPushx(string $key, string|mixed $value)
 * @method static mixed|bool lPop(string $key)
 * @method static mixed|bool rPop(string $key)
 * @method static array blPop(string|string[] $keys, int $timeout)
 * @method static array brPop(string|string[] $keys, int $timeout)
 * @method static int|bool lLen(string $key)
 * @method static int lSize(string $key)
 * @method static mixed|bool lIndex(string $key, int $index)
 * @method static mixed|bool lGet(string $key, int $index)
 * @method static bool lSet(string $key, int $index, string $value)
 * @method static array lRange(string $key, int $start, int $end)
 * @method static array lGetRange(string $key, int $start, int $end)
 * @method static array|bool lTrim(string $key, int $start, int $stop)
 * @method static array|bool listTrim(string $key, int $start, int $stop)
 * @method static int|bool lRem(string $key, string $value, int $count)
 * @method static int|bool lRemove(string $key, string $value, int $count)
 * @method static int lInsert(string $key, int $position, string $pivot, string|mixed $value)
 * @method static int|bool sAdd(string $key, string|mixed ...$value1)
 * @method static int|bool sAddArray(string $key, array $values)
 * @method static int sRem(string $key, string|mixed ...$member1)
 * @method static int sRemove(string $key, string|mixed ...$member1)
 * @method static bool sMove(string $srcKey, string $dstKey, string|mixed $member)
 * @method static bool sIsMember(string $key, string|mixed $value)
 * @method static bool sContains(string $key, string|mixed $value)
 * @method static int sCard(string $key)
 * @method static string|mixed|bool sPop(string $key)
 * @method static string|mixed|array|bool sRandMember(string $key, int $count = 1)
 * @method static array sInter(string $key1, string ...$otherKeys)
 * @method static int|bool sInterStore(string $dstKey, string $key1, string ...$otherKeys)
 * @method static array sUnion(string $key1, string ...$otherKeys)
 * @method static int sUnionStore(string $dstKey, string $key1, string ...$otherKeys)
 * @method static array sDiff(string $key1, string ...$otherKeys)
 * @method static int|bool sDiffStore(string $dstKey, string $key1, string ...$otherKeys)
 * @method static array sMembers(string $key)
 * @method static array sGetMembers(string $key)
 * @method static array|bool sScan(string $key, int &$iterator, string $pattern = null, int $count = 0)
 * @method static string|mixed getSet(string $key, string|mixed $value)
 * @method static string randomKey()
 * @method static bool select(int $dbIndex)
 * @method static bool move(string $key, int $dbIndex)
 * @method static bool rename(string $srcKey, string $dstKey)
 * @method static bool renameKey(string $srcKey, string $dstKey)
 * @method static bool renameNx(string $srcKey, string $dstKey)
 * @method static bool expire(string $key, int $ttl)
 * @method static bool pExpire(string $key, int $ttl)
 * @method static bool setTimeout(string $key, int $ttl)
 * @method static bool expireAt(string $key, int $timestamp)
 * @method static bool pExpireAt(string $key, int $timestamp)
 * @method static array keys(string $pattern)
 * @method static array getKeys(string $pattern)
 * @method static array int dbSize()
 * @method static bool auth(string $password)
 * @method static bool bgrewriteaof()
 * @method static bool slaveof(string $host = '127.0.0.1', int $port = 6379)
 * @method static mixed slowLog(string $operation, int $length = null)
 * @method static string|int|bool object(string $string = '', string $key = '')
 * @method static bool save()
 * @method static bool bgsave()
 * @method static int lastSave()
 * @method static int wait(int $numSlaves, int $timeout)
 * @method static int type(string $key)
 * @method static int append(string $key, string|mixed $value)
 * @method static string getRange(string $key, int $start, int $end)
 * @method static string substr(string $key, int $start, int $end)
 * @method static int setRange(string $key, int $offset, string $value)
 * @method static int strlen(string $key)
 * @method static int bitpos(string $key, int $bit, int $start = 0, int $end = null)
 * @method static int getBit(string $key, int $offset)
 * @method static int setBit(string $key, int $offset, bool|int $value)
 * @method static int bitCount(string $key)
 * @method static int bitOp(string $operation, string $retKey, string $key1, string ...$otherKeys)
 * @method static bool flushDB()
 * @method static bool flushAll()
 * @method static array sort(string $key, array $option = null)
 * @method static string info(string $option = null)
 * @method static bool resetStat()
 * @method static int|bool ttl(string $key)
 * @method static int|bool pttl(string $key)
 * @method static bool persist(string $key)
 * @method static bool mset(array $array)
 * @method static array getMultiple(array $keys)
 * @method static array mget(array $array)
 * @method static int msetnx(array $array)
 * @method static string|mixed|bool rpoplpush(string $srcKey, string $dstKey)
 * @method static string|mixed|bool brpoplpush(string $srcKey, string $dstKey, int $timeout)
 * @method static int zAdd(string $key, array $options, float $score1, string|mixed $value1, float $score2 = null, string|mixed $value2 = null, float $scoreN = null, string|mixed $valueN = null)
 * @method static array zRange(string $key, int $start, int $end, bool $withscores = null)
 * @method static int zRem(string $key, string|mixed $member1, string|mixed ...$otherMembers)
 * @method static int zDelete(string $key, string|mixed $member1, string|mixed ...$otherMembers)
 * @method static array zRevRange(string $key, int $start, int $end, bool $withscore = null)
 * @method static array zRangeByScore(string $key, int $start, int $end, array $options = array())
 * @method static array zRevRangeByScore(string $key, int $start, int $end, array $options = array())
 * @method static array|bool zRangeByLex(string $key, int $min, int $max, int $offset = null, int $limit = null)
 * @method static array zRevRangeByLex(string $key, int $min, int $max, int $offset = null, int $limit = null)
 * @method static int zCount(string $key, string $start, string $end)
 * @method static int zRemRangeByScore(string $key, float|string $start, float|string $end)
 * @method static int zDeleteRangeByScore(string $key, float|string $start, float|string $end)
 * @method static int zRemRangeByRank(string $key, int $start, int $end)
 * @method static int zDeleteRangeByRank(string $key, int $start, int $end)
 * @method static int zCard(string $key)
 * @method static int zSize(string $key)
 * @method static float|bool zScore(string $key, string|mixed $member)
 * @method static int|bool zRank(string $key, string|mixed $member)
 * @method static int|bool zRevRank(string $key, string|mixed $member)
 * @method static float zIncrBy(string $key, float $value, string $member)
 * @method static int zUnionStore(string $output, array $zSetKeys, array $weights = null, string $aggregateFunction = 'SUM')
 * @method static int zUnion(string $output, array $zSetKeys, array $weights = null, string $aggregateFunction = 'SUM')
 * @method static int zInterStore(string $output, array $zSetKeys, array $weights = null, string $aggregateFunction = 'SUM')
 * @method static int zInter(string $output, array $zSetKeys, array $weights = null, string $aggregateFunction = 'SUM')
 * @method static array|bool zScan(string $key, int &$iterator, string $pattern = null, int $count = 0)
 * @method static array bzPopMax(string|array $key1, string|array $key2, int $timeout)
 * @method static array bzPopMin(string|array $key1, string|array $key2, int $timeout)
 * @method static int|bool hSet(string $key, string $hashKey, string $value)
 * @method static bool hSetNx(string $key, string $hashKey, string $value)
 * @method static string hGet(string $key, string $hashKey)
 * @method static int|false hLen(string $key)
 * @method static int|false hDel(string $key, string $hashKey1, string ...$otherHashKeys)
 * @method static array hKeys(string $key)
 * @method static array hVals(string $key)
 * @method static array hGetAll(string $key)
 * @method static bool hExists(string $key, string $hashKey)
 * @method static int hIncrBy(string $key, string $hashKey, int $value)
 * @method static float hIncrByFloat(string $key, string $field, float $increment)
 * @method static bool hMSet(string $key, array $hashKeys)
 * @method static array hMGet(string $key, array $hashKeys)
 * @method static array hScan(string $key, int &$iterator, string $pattern = null, int $count = 0)
 * @method static int hStrLen(string $key, string $field)
 * @method static int geoadd(string $key, float $longitude, float $latitude, string $member)
 * @method static array geohash(string $key, string ...$member)
 * @method static array geopos(string $key, string $member)
 * @method static float geodist(string $key, string $member1, string $member2, string|null $unit = null)
 * @method static mixed georadius(string $key, float $longitude, float $latitude, int $radius, string $unit, array $options = null)
 * @method static array georadiusbymember(string $key, string $member, int $radius, string $units, array $options = null)
 * @method static array config(string $operation, string $key, string|mixed $value)
 * @method static mixed eval(string $script, array $args = array(), int $numKeys = 0)
 * @method static mixed evaluate(string $script, array $args = array(), int $numKeys = 0)
 * @method static mixed evalSha(string $scriptSha, array $args = array(), int $numKeys = 0)
 * @method static mixed evaluateSha(string $scriptSha, array $args = array(), int $numKeys = 0)
 * @method static mixed script(string $command, string $script)
 * @method static string|null getLastError()
 * @method static bool clearLastError()
 * @method static mixed client(string $command, string $value = '')
 * @method static string _prefix(mixed $value)
 * @method static mixed _unserialize(string $value)
 * @method static mixed _serialize(mixed $value)
 * @method static string|bool dump(string $key)
 * @method static bool restore(string $key, int $ttl, string $value)
 * @method static bool migrate(string $host, int $port, string $key, int $db, int $timeout, bool $copy = false, bool $replace = false)
 * @method static array time()
 * @method static array|bool scan(int &$iterator, string $pattern = null, int $count = 0)
 * @method static bool pfAdd(string $key, array $elements)
 * @method static int pfCount(string|array $key)
 * @method static bool pfMerge(string $destKey, array $sourceKeys)
 * @method static mixed rawCommand(string $command, mixed $arguments)
 * @method static int getMode()
 * @method static int xAck(string $stream, string $group, array $messages)
 * @method static string xAdd(string $key, string $id, array $messages, int $maxLen = 0, bool $isApproximate = false)
 * @method static array xClaim(string $key, string $group, string $consumer, int $minIdleTime, array $ids, array $options = [])
 * @method static int xDel(string $key, array $ids)
 * @method static mixed xGroup(string $operation, string $key, string $group, string $msgId = '', bool $mkStream = false)
 * @method static mixed xInfo(string $operation, string $stream, string $group)
 * @method static int xLen(string $stream)
 * @method static array xPending(string $stream, string $group, string $start = null, string $end = null, int $count = null, string $consumer = null)
 * @method static array xRange(string $stream, string $start, string $end, string $count = null)
 * @method static array xRead(array $streams, int|string $count = null, int|string $block = null)
 * @method static array xReadGroup(string $group, string $consumer, array $streams, int|null $count = null, int|null $block = null)
 * @method static array xRevRange(string $stream, string $end, string $start, int $count = null)
 * @method static int xTrim(string $stream, int $maxLen, bool $isApproximate)
 */
final class Redis extends Facade
{
    protected static function getFacadeAccessor()
    {
        return \Redis::class;
    }
}