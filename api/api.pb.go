// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package ssh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Option struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	PrivateKey           []byte   `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Passphrase           []byte   `protobuf:"bytes,6,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Option.Unmarshal(m, b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Option.Marshal(b, m, deterministic)
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return xxx_messageInfo_Option.Size(m)
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Option) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Option) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Option) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Option) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *Option) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type IOption struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Option               *Option  `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IOption) Reset()         { *m = IOption{} }
func (m *IOption) String() string { return proto.CompactTextString(m) }
func (*IOption) ProtoMessage()    {}
func (*IOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *IOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IOption.Unmarshal(m, b)
}
func (m *IOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IOption.Marshal(b, m, deterministic)
}
func (m *IOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOption.Merge(m, src)
}
func (m *IOption) XXX_Size() int {
	return xxx_messageInfo_IOption.Size(m)
}
func (m *IOption) XXX_DiscardUnknown() {
	xxx_messageInfo_IOption.DiscardUnknown(m)
}

var xxx_messageInfo_IOption proto.InternalMessageInfo

func (m *IOption) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IOption) GetOption() *Option {
	if m != nil {
		return m.Option
	}
	return nil
}

type Bash struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bash                 string   `protobuf:"bytes,2,opt,name=bash,proto3" json:"bash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bash) Reset()         { *m = Bash{} }
func (m *Bash) String() string { return proto.CompactTextString(m) }
func (*Bash) ProtoMessage()    {}
func (*Bash) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Bash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bash.Unmarshal(m, b)
}
func (m *Bash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bash.Marshal(b, m, deterministic)
}
func (m *Bash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bash.Merge(m, src)
}
func (m *Bash) XXX_Size() int {
	return xxx_messageInfo_Bash.Size(m)
}
func (m *Bash) XXX_DiscardUnknown() {
	xxx_messageInfo_Bash.DiscardUnknown(m)
}

var xxx_messageInfo_Bash proto.InternalMessageInfo

func (m *Bash) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bash) GetBash() string {
	if m != nil {
		return m.Bash
	}
	return ""
}

type Output struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Data struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host                 string    `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Username             string    `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Connected            string    `protobuf:"bytes,5,opt,name=connected,proto3" json:"connected,omitempty"`
	Tunnels              []*Tunnel `protobuf:"bytes,6,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Data) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Data) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Data) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Data) GetConnected() string {
	if m != nil {
		return m.Connected
	}
	return ""
}

func (m *Data) GetTunnels() []*Tunnel {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

type Tunnel struct {
	SrcIp                string   `protobuf:"bytes,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcPort              uint32   `protobuf:"varint,2,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstIp                string   `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstPort              uint32   `protobuf:"varint,4,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tunnel.Unmarshal(m, b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return xxx_messageInfo_Tunnel.Size(m)
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *Tunnel) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Tunnel) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *Tunnel) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

type IDs struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDs) Reset()         { *m = IDs{} }
func (m *IDs) String() string { return proto.CompactTextString(m) }
func (*IDs) ProtoMessage()    {}
func (*IDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *IDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDs.Unmarshal(m, b)
}
func (m *IDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDs.Marshal(b, m, deterministic)
}
func (m *IDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDs.Merge(m, src)
}
func (m *IDs) XXX_Size() int {
	return xxx_messageInfo_IDs.Size(m)
}
func (m *IDs) XXX_DiscardUnknown() {
	xxx_messageInfo_IDs.DiscardUnknown(m)
}

var xxx_messageInfo_IDs proto.InternalMessageInfo

func (m *IDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DataLists struct {
	Data                 []*Data  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataLists) Reset()         { *m = DataLists{} }
func (m *DataLists) String() string { return proto.CompactTextString(m) }
func (*DataLists) ProtoMessage()    {}
func (*DataLists) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *DataLists) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataLists.Unmarshal(m, b)
}
func (m *DataLists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataLists.Marshal(b, m, deterministic)
}
func (m *DataLists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataLists.Merge(m, src)
}
func (m *DataLists) XXX_Size() int {
	return xxx_messageInfo_DataLists.Size(m)
}
func (m *DataLists) XXX_DiscardUnknown() {
	xxx_messageInfo_DataLists.DiscardUnknown(m)
}

var xxx_messageInfo_DataLists proto.InternalMessageInfo

func (m *DataLists) GetData() []*Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type TunnelsOption struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tunnels              []*Tunnel `protobuf:"bytes,2,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TunnelsOption) Reset()         { *m = TunnelsOption{} }
func (m *TunnelsOption) String() string { return proto.CompactTextString(m) }
func (*TunnelsOption) ProtoMessage()    {}
func (*TunnelsOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *TunnelsOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelsOption.Unmarshal(m, b)
}
func (m *TunnelsOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelsOption.Marshal(b, m, deterministic)
}
func (m *TunnelsOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelsOption.Merge(m, src)
}
func (m *TunnelsOption) XXX_Size() int {
	return xxx_messageInfo_TunnelsOption.Size(m)
}
func (m *TunnelsOption) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelsOption.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelsOption proto.InternalMessageInfo

func (m *TunnelsOption) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TunnelsOption) GetTunnels() []*Tunnel {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

type Port struct {
	Data                 uint32   `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetData() uint32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*Option)(nil), "ssh.Option")
	proto.RegisterType((*IOption)(nil), "ssh.IOption")
	proto.RegisterType((*Bash)(nil), "ssh.Bash")
	proto.RegisterType((*Output)(nil), "ssh.Output")
	proto.RegisterType((*ID)(nil), "ssh.ID")
	proto.RegisterType((*Data)(nil), "ssh.Data")
	proto.RegisterType((*Tunnel)(nil), "ssh.Tunnel")
	proto.RegisterType((*IDs)(nil), "ssh.IDs")
	proto.RegisterType((*DataLists)(nil), "ssh.DataLists")
	proto.RegisterType((*TunnelsOption)(nil), "ssh.TunnelsOption")
	proto.RegisterType((*Port)(nil), "ssh.Port")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x4f, 0xd4, 0x40,
	0x14, 0xdd, 0xee, 0x74, 0xbb, 0xdb, 0xcb, 0x47, 0xcc, 0x8d, 0x68, 0x2d, 0xa8, 0x9b, 0x21, 0x26,
	0x2b, 0xc6, 0x62, 0xf0, 0xc1, 0x37, 0x13, 0xcc, 0x82, 0x69, 0x34, 0x81, 0x34, 0xbc, 0x93, 0xd2,
	0x8e, 0xb4, 0xb1, 0xb4, 0x4d, 0xef, 0x54, 0xe5, 0x3f, 0xf8, 0x1f, 0x7c, 0xf6, 0x5f, 0x9a, 0x99,
	0xe9, 0x96, 0x0d, 0xb2, 0xf0, 0x76, 0x7b, 0xce, 0x3d, 0xd3, 0x73, 0xcf, 0x9d, 0x01, 0x37, 0xae,
	0xf3, 0xa0, 0x6e, 0x2a, 0x59, 0x21, 0x23, 0xca, 0xfc, 0xed, 0xcb, 0xaa, 0xba, 0x2c, 0xc4, 0xbe,
	0x86, 0x2e, 0xda, 0x6f, 0xfb, 0xe2, 0xaa, 0x96, 0xd7, 0xa6, 0x83, 0xff, 0xb5, 0xc0, 0x39, 0xa9,
	0x65, 0x5e, 0x95, 0x88, 0x60, 0x67, 0x15, 0x49, 0xcf, 0x9a, 0x5a, 0x33, 0x37, 0xd2, 0xb5, 0xc2,
	0xea, 0xaa, 0x91, 0xde, 0x70, 0x6a, 0xcd, 0x36, 0x22, 0x5d, 0xa3, 0x0f, 0x93, 0x96, 0x44, 0x53,
	0xc6, 0x57, 0xc2, 0x63, 0xba, 0xb7, 0xff, 0x56, 0x5c, 0x1d, 0x13, 0xfd, 0xac, 0x9a, 0xd4, 0xb3,
	0x0d, 0xb7, 0xf8, 0xc6, 0x97, 0xb0, 0x56, 0x37, 0xf9, 0x8f, 0x58, 0x8a, 0xf3, 0xef, 0xe2, 0xda,
	0x1b, 0x4d, 0xad, 0xd9, 0x7a, 0x04, 0x1d, 0xf4, 0x45, 0x5c, 0xe3, 0x0b, 0x00, 0xd5, 0x5c, 0x67,
	0x4d, 0x4c, 0xc2, 0x73, 0x3a, 0xbe, 0x47, 0xf8, 0x47, 0x18, 0x87, 0x9d, 0xd7, 0x4d, 0x18, 0xe6,
	0x69, 0xe7, 0x74, 0x98, 0xa7, 0xb8, 0x0b, 0x4e, 0xa5, 0x19, 0xed, 0x74, 0xed, 0x60, 0x2d, 0x20,
	0xca, 0x02, 0xd3, 0x1c, 0x75, 0x14, 0xdf, 0x03, 0xfb, 0x53, 0x4c, 0xd9, 0x7f, 0x62, 0x04, 0xfb,
	0x22, 0xa6, 0x4c, 0x4b, 0xdd, 0x48, 0xd7, 0x7c, 0x07, 0x9c, 0x93, 0x56, 0xd6, 0xad, 0x8e, 0x20,
	0x8d, 0x65, 0xbc, 0x88, 0x45, 0xd5, 0xfc, 0x31, 0x0c, 0xc3, 0xf9, 0xed, 0x73, 0xf8, 0x1f, 0x0b,
	0xec, 0x79, 0x2c, 0xe3, 0xbb, 0x7e, 0xa0, 0x93, 0x1d, 0xde, 0x91, 0x2c, 0x5b, 0x91, 0xac, 0x7d,
	0x2b, 0xd9, 0x1d, 0x70, 0x93, 0xaa, 0x2c, 0x45, 0x22, 0x45, 0xaa, 0xb3, 0x73, 0xa3, 0x1b, 0x00,
	0x5f, 0xc1, 0x58, 0xb6, 0x65, 0x29, 0x0a, 0xf2, 0x9c, 0x29, 0xeb, 0x03, 0x38, 0xd3, 0x58, 0xb4,
	0xe0, 0x78, 0x01, 0x8e, 0x81, 0x70, 0x0b, 0x1c, 0x6a, 0x92, 0xf3, 0xbc, 0xee, 0x6c, 0x8e, 0xa8,
	0x49, 0xc2, 0x1a, 0x9f, 0xc1, 0x44, 0xc1, 0x4b, 0x3b, 0x1f, 0x53, 0x93, 0x9c, 0x2a, 0x73, 0x5b,
	0xe0, 0xa4, 0x24, 0x95, 0xc2, 0x2c, 0x7d, 0x94, 0x92, 0x34, 0x0a, 0x05, 0x6b, 0x85, 0x6d, 0x14,
	0x29, 0x49, 0xa5, 0xe0, 0x4f, 0x81, 0x85, 0x73, 0xc2, 0x47, 0xc0, 0xf2, 0x94, 0x3c, 0x6b, 0xca,
	0x66, 0x6e, 0xa4, 0x4a, 0xbe, 0x07, 0xae, 0xca, 0xe9, 0x6b, 0x4e, 0x92, 0xf0, 0x79, 0x9f, 0xaf,
	0xf2, 0xed, 0x6a, 0xdf, 0x8a, 0xed, 0xa2, 0x3e, 0x86, 0x0d, 0x63, 0x99, 0x56, 0xac, 0x7e, 0x69,
	0xf4, 0xe1, 0x3d, 0xa3, 0xfb, 0x60, 0xeb, 0x31, 0x96, 0xd7, 0xb9, 0x61, 0xfe, 0x71, 0xf0, 0x9b,
	0x01, 0x3b, 0x3c, 0x0d, 0xf1, 0x1d, 0x8c, 0xcf, 0x04, 0xc9, 0xbc, 0xbc, 0xc4, 0xe5, 0x0b, 0xe4,
	0x3f, 0x09, 0xcc, 0x13, 0x0a, 0x16, 0x4f, 0x28, 0x38, 0x52, 0x4f, 0x88, 0x0f, 0xf0, 0x2d, 0xb0,
	0xd3, 0x56, 0xe2, 0xba, 0xee, 0x0e, 0x1f, 0x6c, 0x9f, 0x82, 0x7d, 0xf4, 0x4b, 0x24, 0x68, 0xa6,
	0x54, 0x97, 0xd1, 0xef, 0x7e, 0xa4, 0xef, 0x1a, 0x1f, 0xe0, 0x1b, 0x70, 0xe6, 0xa2, 0x10, 0x52,
	0xe0, 0xd8, 0x9c, 0x39, 0xbf, 0xe7, 0xb8, 0x6d, 0x60, 0x9f, 0x85, 0xbc, 0xe9, 0xbc, 0x09, 0x8f,
	0x0f, 0xf0, 0x35, 0xb0, 0xc3, 0xa2, 0xc0, 0x15, 0x6a, 0x7f, 0xd2, 0x89, 0x88, 0x0f, 0x70, 0x17,
	0x46, 0x66, 0x17, 0x3d, 0xe8, 0x6f, 0xf6, 0x47, 0x69, 0x86, 0x0f, 0xf0, 0x03, 0x8c, 0xbb, 0x45,
	0x20, 0x2e, 0x25, 0x4c, 0x0f, 0x0e, 0xbd, 0x0f, 0x93, 0xe3, 0x46, 0x08, 0x9d, 0xfe, 0x2a, 0x37,
	0xc6, 0xb9, 0xbe, 0x35, 0x83, 0x0b, 0x47, 0x93, 0xef, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x90,
	0x7b, 0x40, 0x9d, 0xc9, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Testing(ctx context.Context, in *Option, opts ...grpc.CallOption) (*empty.Empty, error)
	Put(ctx context.Context, in *IOption, opts ...grpc.CallOption) (*empty.Empty, error)
	Exec(ctx context.Context, in *Bash, opts ...grpc.CallOption) (*Output, error)
	Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Data, error)
	All(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDs, error)
	Lists(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*DataLists, error)
	Tunnels(ctx context.Context, in *TunnelsOption, opts ...grpc.CallOption) (*empty.Empty, error)
	FreePort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Port, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Testing(ctx context.Context, in *Option, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ssh.API/Testing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Put(ctx context.Context, in *IOption, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ssh.API/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Exec(ctx context.Context, in *Bash, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/ssh.API/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ssh.API/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/ssh.API/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) All(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDs, error) {
	out := new(IDs)
	err := c.cc.Invoke(ctx, "/ssh.API/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Lists(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*DataLists, error) {
	out := new(DataLists)
	err := c.cc.Invoke(ctx, "/ssh.API/Lists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Tunnels(ctx context.Context, in *TunnelsOption, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ssh.API/Tunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FreePort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/ssh.API/FreePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Testing(context.Context, *Option) (*empty.Empty, error)
	Put(context.Context, *IOption) (*empty.Empty, error)
	Exec(context.Context, *Bash) (*Output, error)
	Delete(context.Context, *ID) (*empty.Empty, error)
	Get(context.Context, *ID) (*Data, error)
	All(context.Context, *empty.Empty) (*IDs, error)
	Lists(context.Context, *IDs) (*DataLists, error)
	Tunnels(context.Context, *TunnelsOption) (*empty.Empty, error)
	FreePort(context.Context, *empty.Empty) (*Port, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Testing(ctx context.Context, req *Option) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Testing not implemented")
}
func (*UnimplementedAPIServer) Put(ctx context.Context, req *IOption) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedAPIServer) Exec(ctx context.Context, req *Bash) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedAPIServer) Delete(ctx context.Context, req *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAPIServer) Get(ctx context.Context, req *ID) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAPIServer) All(ctx context.Context, req *empty.Empty) (*IDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (*UnimplementedAPIServer) Lists(ctx context.Context, req *IDs) (*DataLists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lists not implemented")
}
func (*UnimplementedAPIServer) Tunnels(ctx context.Context, req *TunnelsOption) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tunnels not implemented")
}
func (*UnimplementedAPIServer) FreePort(ctx context.Context, req *empty.Empty) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreePort not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Testing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Option)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Testing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Testing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Testing(ctx, req.(*Option))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Put(ctx, req.(*IOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Exec(ctx, req.(*Bash))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).All(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Lists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Lists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Lists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Lists(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Tunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelsOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Tunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/Tunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Tunnels(ctx, req.(*TunnelsOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FreePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FreePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.API/FreePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FreePort(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssh.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Testing",
			Handler:    _API_Testing_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _API_Put_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _API_Exec_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "All",
			Handler:    _API_All_Handler,
		},
		{
			MethodName: "Lists",
			Handler:    _API_Lists_Handler,
		},
		{
			MethodName: "Tunnels",
			Handler:    _API_Tunnels_Handler,
		},
		{
			MethodName: "FreePort",
			Handler:    _API_FreePort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
