syntax = "proto3";
package ssh;
option go_package = "ssh-microservice/gen/go/ssh";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service API {
  rpc Testing (Option) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/testing",
      body: "*",
    };
  }
  rpc Put (IOption) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/client",
      body: "*",
    };
  }
  rpc Exec (Bash) returns (Output) {
    option (google.api.http) = {
      post: "/exec",
      body: "*",
    };
  }
  rpc Delete (ID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/client",
    };
  }
  rpc Get (ID) returns (Data) {
    option (google.api.http) = {
      get: "/client",
    };
  }
  rpc All (google.protobuf.Empty) returns (IDs) {
    option (google.api.http) = {
      get: "/clients",
    };
  }
  rpc Lists (IDs) returns (DataLists) {
    option (google.api.http) = {
      post: "/clients",
      body: "*"
    };
  }
  rpc Tunnels (TunnelsOption) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/tunnels",
      body: "*",
    };
  }
  rpc FreePort (google.protobuf.Empty) returns (Port) {
    option (google.api.http) = {
      get: "/free_port",
    };
  }
}

message Option {
  string host = 1;
  uint32 port = 2;
  string username = 3;
  string password = 4;
  string private_key = 5;
  string passphrase = 6;
}

message IOption {
  string id = 1;
  Option option = 2;
}

message Bash {
  string id = 1;
  string bash = 2;
}

message Output {
  bytes data = 1;
}

message ID {
  string id = 1;
}

message Data {
  string id = 1;
  string host = 2;
  uint32 port = 3;
  string username = 4;
  string connected = 5;
  repeated Tunnel tunnels = 6;
}

message Tunnel {
  string src_ip = 1;
  uint32 src_port = 2;
  string dst_ip = 3;
  uint32 dst_port = 4;
}

message IDs {
  repeated string ids = 1;
}

message DataLists {
  repeated Data data = 1;
}

message TunnelsOption {
  string id = 1;
  repeated Tunnel tunnels = 2;
}

message Port {
  uint32 data = 1;
}
